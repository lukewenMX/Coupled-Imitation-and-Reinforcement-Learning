// Generated by gencpp from file planning_msgs/PolygonWithHoles.msg
// DO NOT EDIT!


#ifndef PLANNING_MSGS_MESSAGE_POLYGONWITHHOLES_H
#define PLANNING_MSGS_MESSAGE_POLYGONWITHHOLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <planning_msgs/Polygon2D.h>
#include <planning_msgs/Polygon2D.h>

namespace planning_msgs
{
template <class ContainerAllocator>
struct PolygonWithHoles_
{
  typedef PolygonWithHoles_<ContainerAllocator> Type;

  PolygonWithHoles_()
    : hull()
    , holes()  {
    }
  PolygonWithHoles_(const ContainerAllocator& _alloc)
    : hull(_alloc)
    , holes(_alloc)  {
  (void)_alloc;
    }



   typedef  ::planning_msgs::Polygon2D_<ContainerAllocator>  _hull_type;
  _hull_type hull;

   typedef std::vector< ::planning_msgs::Polygon2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::planning_msgs::Polygon2D_<ContainerAllocator> >::other >  _holes_type;
  _holes_type holes;





  typedef boost::shared_ptr< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> const> ConstPtr;

}; // struct PolygonWithHoles_

typedef ::planning_msgs::PolygonWithHoles_<std::allocator<void> > PolygonWithHoles;

typedef boost::shared_ptr< ::planning_msgs::PolygonWithHoles > PolygonWithHolesPtr;
typedef boost::shared_ptr< ::planning_msgs::PolygonWithHoles const> PolygonWithHolesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning_msgs::PolygonWithHoles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planning_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'planning_msgs': ['/home/lukewen/gym_gazebo/gym_gazebo/envs/installation/catkin_ws/src/mav_comm/planning_msgs/msg'], 'mav_msgs': ['/home/lukewen/gym_gazebo/gym_gazebo/envs/installation/catkin_ws/src/mav_comm/mav_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df7f266352dfcf3e4d29156dd85febf9";
  }

  static const char* value(const ::planning_msgs::PolygonWithHoles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf7f266352dfcf3eULL;
  static const uint64_t static_value2 = 0x4d29156dd85febf9ULL;
};

template<class ContainerAllocator>
struct DataType< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning_msgs/PolygonWithHoles";
  }

  static const char* value(const ::planning_msgs::PolygonWithHoles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A message to define a 2D polygon with holes.\n\
planning_msgs/Polygon2D hull\n\
planning_msgs/Polygon2D[] holes\n\
\n\
================================================================================\n\
MSG: planning_msgs/Polygon2D\n\
# A specification of a 2D polygon where the first and last points are assumed to be connected.\n\
planning_msgs/Point2D[] points\n\
\n\
================================================================================\n\
MSG: planning_msgs/Point2D\n\
# This contains the position of a 2D point.\n\
float64 x\n\
float64 y\n\
";
  }

  static const char* value(const ::planning_msgs::PolygonWithHoles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hull);
      stream.next(m.holes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolygonWithHoles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning_msgs::PolygonWithHoles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning_msgs::PolygonWithHoles_<ContainerAllocator>& v)
  {
    s << indent << "hull: ";
    s << std::endl;
    Printer< ::planning_msgs::Polygon2D_<ContainerAllocator> >::stream(s, indent + "  ", v.hull);
    s << indent << "holes[]" << std::endl;
    for (size_t i = 0; i < v.holes.size(); ++i)
    {
      s << indent << "  holes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planning_msgs::Polygon2D_<ContainerAllocator> >::stream(s, indent + "    ", v.holes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MSGS_MESSAGE_POLYGONWITHHOLES_H
