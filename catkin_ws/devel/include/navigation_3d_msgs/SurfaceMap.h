// Generated by gencpp from file navigation_3d_msgs/SurfaceMap.msg
// DO NOT EDIT!


#ifndef NAVIGATION_3D_MSGS_MESSAGE_SURFACEMAP_H
#define NAVIGATION_3D_MSGS_MESSAGE_SURFACEMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace navigation_3d_msgs
{
template <class ContainerAllocator>
struct SurfaceMap_
{
  typedef SurfaceMap_<ContainerAllocator> Type;

  SurfaceMap_()
    : width_(0)
    , height_(0)
    , origin_()
    , resolution_(0.0)
    , H_()  {
    }
  SurfaceMap_(const ContainerAllocator& _alloc)
    : width_(0)
    , height_(0)
    , origin_(_alloc)
    , resolution_(0.0)
    , H_(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _width__type;
  _width__type width_;

   typedef int32_t _height__type;
  _height__type height_;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _origin__type;
  _origin__type origin_;

   typedef float _resolution__type;
  _resolution__type resolution_;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _H__type;
  _H__type H_;





  typedef boost::shared_ptr< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> const> ConstPtr;

}; // struct SurfaceMap_

typedef ::navigation_3d_msgs::SurfaceMap_<std::allocator<void> > SurfaceMap;

typedef boost::shared_ptr< ::navigation_3d_msgs::SurfaceMap > SurfaceMapPtr;
typedef boost::shared_ptr< ::navigation_3d_msgs::SurfaceMap const> SurfaceMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace navigation_3d_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'navigation_3d_msgs': ['/home/lukewen/gym_gazebo/gym_gazebo/envs/installation/catkin_ws/src/nav_common/navigation_3d_msgs/msg', '/home/lukewen/gym_gazebo/gym_gazebo/envs/installation/catkin_ws/devel/share/navigation_3d_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3e2530951abea04475d9a0a18c55de6";
  }

  static const char* value(const ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3e2530951abea04ULL;
  static const uint64_t static_value2 = 0x475d9a0a18c55de6ULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation_3d_msgs/SurfaceMap";
  }

  static const char* value(const ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# width of the 2D grid in number of cells\n\
int32 width_\n\
# height of the 2D grid in number of cells\n\
int32 height_\n\
# origin of thet grid\n\
geometry_msgs/Point origin_\n\
# resolution of the grid (m/cell)\n\
float32 resolution_\n\
# vector containing the grid in row-major order (size of H_ = width_*height_)\n\
float32[] H_\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width_);
      stream.next(m.height_);
      stream.next(m.origin_);
      stream.next(m.resolution_);
      stream.next(m.H_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SurfaceMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation_3d_msgs::SurfaceMap_<ContainerAllocator>& v)
  {
    s << indent << "width_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width_);
    s << indent << "height_: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height_);
    s << indent << "origin_: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.origin_);
    s << indent << "resolution_: ";
    Printer<float>::stream(s, indent + "  ", v.resolution_);
    s << indent << "H_[]" << std::endl;
    for (size_t i = 0; i < v.H_.size(); ++i)
    {
      s << indent << "  H_[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.H_[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION_3D_MSGS_MESSAGE_SURFACEMAP_H
