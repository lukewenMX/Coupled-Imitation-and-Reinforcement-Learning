# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from navigation_3d_msgs/SurfaceMap.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class SurfaceMap(genpy.Message):
  _md5sum = "f3e2530951abea04475d9a0a18c55de6"
  _type = "navigation_3d_msgs/SurfaceMap"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# width of the 2D grid in number of cells
int32 width_
# height of the 2D grid in number of cells
int32 height_
# origin of thet grid
geometry_msgs/Point origin_
# resolution of the grid (m/cell)
float32 resolution_
# vector containing the grid in row-major order (size of H_ = width_*height_)
float32[] H_
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['width_','height_','origin_','resolution_','H_']
  _slot_types = ['int32','int32','geometry_msgs/Point','float32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       width_,height_,origin_,resolution_,H_

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SurfaceMap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.width_ is None:
        self.width_ = 0
      if self.height_ is None:
        self.height_ = 0
      if self.origin_ is None:
        self.origin_ = geometry_msgs.msg.Point()
      if self.resolution_ is None:
        self.resolution_ = 0.
      if self.H_ is None:
        self.H_ = []
    else:
      self.width_ = 0
      self.height_ = 0
      self.origin_ = geometry_msgs.msg.Point()
      self.resolution_ = 0.
      self.H_ = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i3df().pack(_x.width_, _x.height_, _x.origin_.x, _x.origin_.y, _x.origin_.z, _x.resolution_))
      length = len(self.H_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.H_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.origin_ is None:
        self.origin_ = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.width_, _x.height_, _x.origin_.x, _x.origin_.y, _x.origin_.z, _x.resolution_,) = _get_struct_2i3df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.H_ = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i3df().pack(_x.width_, _x.height_, _x.origin_.x, _x.origin_.y, _x.origin_.z, _x.resolution_))
      length = len(self.H_)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.H_.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.origin_ is None:
        self.origin_ = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.width_, _x.height_, _x.origin_.x, _x.origin_.y, _x.origin_.z, _x.resolution_,) = _get_struct_2i3df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.H_ = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i3df = None
def _get_struct_2i3df():
    global _struct_2i3df
    if _struct_2i3df is None:
        _struct_2i3df = struct.Struct("<2i3df")
    return _struct_2i3df
