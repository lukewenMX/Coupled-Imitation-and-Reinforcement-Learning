# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from exploration3d_msgs/SurfaceFrontierRepresentative.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class SurfaceFrontierRepresentative(genpy.Message):
  _md5sum = "ed77d51612da3010c5ebfa0790477505"
  _type = "exploration3d_msgs/SurfaceFrontierRepresentative"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# A surface frontier is a portion of a large surface frontier contour. If the contour length is less than a certain threshold, the entire contour is represented using a single point p, its length and the two corner points as a frontier.

# If the contour's length exceeds this threshold, the contour is segmented to portions with some length, where each segment's mid-point and its length is reported as a frontier. Most such segments don't carry corner points. However the two segments at the start/end of the frontier contour carry one corner point.

# the single 3D point representing a surface frontier
geometry_msgs/Point p
# the length of the frontier in meters
float32 length
# the length of the parent frontier contour in meters
float32 parent_length
# the corner points associated with the frontier representative
geometry_msgs/Point corner_1
geometry_msgs/Point corner_2
# the two corner points of the parent frontier contour containing the frontier
geometry_msgs/Point parent_corner_1
geometry_msgs/Point parent_corner_2
# surface trend vector
geometry_msgs/Point v
# tangent to the surface frontier contour at representative point p
geometry_msgs/Point f_grad
# surface normal at p oriented towards the reachable portion of the environment
geometry_msgs/Point n
# Coeffcient of the quadratic used to approximate surface trend curve
float64 a
# if the representative is from the surface the robot traversed
bool is_floor

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['p','length','parent_length','corner_1','corner_2','parent_corner_1','parent_corner_2','v','f_grad','n','a','is_floor']
  _slot_types = ['geometry_msgs/Point','float32','float32','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       p,length,parent_length,corner_1,corner_2,parent_corner_1,parent_corner_2,v,f_grad,n,a,is_floor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SurfaceFrontierRepresentative, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.p is None:
        self.p = geometry_msgs.msg.Point()
      if self.length is None:
        self.length = 0.
      if self.parent_length is None:
        self.parent_length = 0.
      if self.corner_1 is None:
        self.corner_1 = geometry_msgs.msg.Point()
      if self.corner_2 is None:
        self.corner_2 = geometry_msgs.msg.Point()
      if self.parent_corner_1 is None:
        self.parent_corner_1 = geometry_msgs.msg.Point()
      if self.parent_corner_2 is None:
        self.parent_corner_2 = geometry_msgs.msg.Point()
      if self.v is None:
        self.v = geometry_msgs.msg.Point()
      if self.f_grad is None:
        self.f_grad = geometry_msgs.msg.Point()
      if self.n is None:
        self.n = geometry_msgs.msg.Point()
      if self.a is None:
        self.a = 0.
      if self.is_floor is None:
        self.is_floor = False
    else:
      self.p = geometry_msgs.msg.Point()
      self.length = 0.
      self.parent_length = 0.
      self.corner_1 = geometry_msgs.msg.Point()
      self.corner_2 = geometry_msgs.msg.Point()
      self.parent_corner_1 = geometry_msgs.msg.Point()
      self.parent_corner_2 = geometry_msgs.msg.Point()
      self.v = geometry_msgs.msg.Point()
      self.f_grad = geometry_msgs.msg.Point()
      self.n = geometry_msgs.msg.Point()
      self.a = 0.
      self.is_floor = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d2f22dB().pack(_x.p.x, _x.p.y, _x.p.z, _x.length, _x.parent_length, _x.corner_1.x, _x.corner_1.y, _x.corner_1.z, _x.corner_2.x, _x.corner_2.y, _x.corner_2.z, _x.parent_corner_1.x, _x.parent_corner_1.y, _x.parent_corner_1.z, _x.parent_corner_2.x, _x.parent_corner_2.y, _x.parent_corner_2.z, _x.v.x, _x.v.y, _x.v.z, _x.f_grad.x, _x.f_grad.y, _x.f_grad.z, _x.n.x, _x.n.y, _x.n.z, _x.a, _x.is_floor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.p is None:
        self.p = geometry_msgs.msg.Point()
      if self.corner_1 is None:
        self.corner_1 = geometry_msgs.msg.Point()
      if self.corner_2 is None:
        self.corner_2 = geometry_msgs.msg.Point()
      if self.parent_corner_1 is None:
        self.parent_corner_1 = geometry_msgs.msg.Point()
      if self.parent_corner_2 is None:
        self.parent_corner_2 = geometry_msgs.msg.Point()
      if self.v is None:
        self.v = geometry_msgs.msg.Point()
      if self.f_grad is None:
        self.f_grad = geometry_msgs.msg.Point()
      if self.n is None:
        self.n = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 209
      (_x.p.x, _x.p.y, _x.p.z, _x.length, _x.parent_length, _x.corner_1.x, _x.corner_1.y, _x.corner_1.z, _x.corner_2.x, _x.corner_2.y, _x.corner_2.z, _x.parent_corner_1.x, _x.parent_corner_1.y, _x.parent_corner_1.z, _x.parent_corner_2.x, _x.parent_corner_2.y, _x.parent_corner_2.z, _x.v.x, _x.v.y, _x.v.z, _x.f_grad.x, _x.f_grad.y, _x.f_grad.z, _x.n.x, _x.n.y, _x.n.z, _x.a, _x.is_floor,) = _get_struct_3d2f22dB().unpack(str[start:end])
      self.is_floor = bool(self.is_floor)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d2f22dB().pack(_x.p.x, _x.p.y, _x.p.z, _x.length, _x.parent_length, _x.corner_1.x, _x.corner_1.y, _x.corner_1.z, _x.corner_2.x, _x.corner_2.y, _x.corner_2.z, _x.parent_corner_1.x, _x.parent_corner_1.y, _x.parent_corner_1.z, _x.parent_corner_2.x, _x.parent_corner_2.y, _x.parent_corner_2.z, _x.v.x, _x.v.y, _x.v.z, _x.f_grad.x, _x.f_grad.y, _x.f_grad.z, _x.n.x, _x.n.y, _x.n.z, _x.a, _x.is_floor))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.p is None:
        self.p = geometry_msgs.msg.Point()
      if self.corner_1 is None:
        self.corner_1 = geometry_msgs.msg.Point()
      if self.corner_2 is None:
        self.corner_2 = geometry_msgs.msg.Point()
      if self.parent_corner_1 is None:
        self.parent_corner_1 = geometry_msgs.msg.Point()
      if self.parent_corner_2 is None:
        self.parent_corner_2 = geometry_msgs.msg.Point()
      if self.v is None:
        self.v = geometry_msgs.msg.Point()
      if self.f_grad is None:
        self.f_grad = geometry_msgs.msg.Point()
      if self.n is None:
        self.n = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 209
      (_x.p.x, _x.p.y, _x.p.z, _x.length, _x.parent_length, _x.corner_1.x, _x.corner_1.y, _x.corner_1.z, _x.corner_2.x, _x.corner_2.y, _x.corner_2.z, _x.parent_corner_1.x, _x.parent_corner_1.y, _x.parent_corner_1.z, _x.parent_corner_2.x, _x.parent_corner_2.y, _x.parent_corner_2.z, _x.v.x, _x.v.y, _x.v.z, _x.f_grad.x, _x.f_grad.y, _x.f_grad.z, _x.n.x, _x.n.y, _x.n.z, _x.a, _x.is_floor,) = _get_struct_3d2f22dB().unpack(str[start:end])
      self.is_floor = bool(self.is_floor)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d2f22dB = None
def _get_struct_3d2f22dB():
    global _struct_3d2f22dB
    if _struct_3d2f22dB is None:
        _struct_3d2f22dB = struct.Struct("<3d2f22dB")
    return _struct_3d2f22dB
